// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String?
  role       Role       @default(USER)
  phone      String?
  picture    String?
  status     UserStatus @default(ACTIVE)
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blogs      Blog[]

  Resume  Resume[]
  Project Project[]
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  coverUrl  String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String   @unique
  description  String
  liveUrl      String?
  repoUrl      String?
  techStack    Json?
  image        Json?
  frontendRepo String?
  backendRepo  String?
  features     String[]
  authorId     Int
  author       User     @relation(fields: [authorId], references: [id])
  createdAt    DateTime @default(now())
}

model Resume {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  data      Json     @default("[]")
  createdAt DateTime @default(now())
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCK
}
